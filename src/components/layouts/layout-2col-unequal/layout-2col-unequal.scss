@import "../../base-styles/init/init";
// Responsive 2-column, not equal grid
//
// The `.layout-2col-unequal` layout is a responsive grid layout that is:
// - 1 column at mobile sizes
// - 2 columns at desktop sizes
//
// The `.layout-2col-unequal` class is used on the container div for the layout. A *grid
// item* in the container can be created using one the following class:
// - `.layout-2col-unequal__col` : 1-column wide grid item spanning column 1
//
// .layout-2col-unequal--second-is-narrow - The second column is the narrow one.
// .layout-2col-unequal--two-columns-on-tablet - Become 2 cols at tablet size.
// .layout-2col-unequal--always-2col - The layout is always two columns.
// .layout-2col-unequal--inverse - Inverse display with same dom structure.
// .layout-2col-unequal--with-horizontal-gutters - Gutters on both sides, needs wrapper with overflow hidden.
// .layout-2col-unequal--with-vertical-gutters - Gutters on top and bottom.

// The following two mixins add the layout logic to become 2 columns.
// They are in mixins to be reused.
@mixin two-columns-unequal {
  display: flex;
  flex-wrap: wrap;
}

@mixin two-columns-unequal-column {
  float: left;
  //flex-grow: 2; // If a column is missing it will grow to cover it.

  &:nth-child(2n) {
    width: (100 / 3) * 2%;
  }

  &:nth-child(2n + 1) {
    clear: left;
    width: (100 / 3) * 1%;
  }
}


.layout-2col-unequal,
%layout-2col-unequal {
  min-width: 100%;

  // Two columns, the first column is the narrow one.
  @include breakpoint($desktop) {
    @include two-columns-unequal;

    &--col,
    &__col {
      @include two-columns-unequal-column;
    }
  }

  // The layout is always two columns.
  &--always-2col {
    @include two-columns-unequal;

    .layout-2col-unequal--col,
    %layout-2col-unequal__col,
    .layout-2col-unequal__col {
      @include two-columns-unequal-column;
    }
  }

  &--two-columns-on-tablet {
    @include breakpoint($tablet ($desktop - 1px)) {
      @include two-columns-unequal;

      .layout-2col-unequal--col,
      %layout-2col-unequal__col,
      .layout-2col-unequal__col {
        @include two-columns-unequal-column;
      }

      &.layout-2col-unequal--with-horizontal-gutters {
        .layout-2col-unequal--col,
        %layout-2col-unequal__col,
        .layout-2col-unequal__col {
          padding-left: $gutters-tablet / 2;
          padding-right: $gutters-tablet / 2;

          &:nth-child(2n + 1) {
            margin-left: -$gutters-tablet / 2;
          }

          &:nth-child(2n) {
            margin-right: -$gutters-tablet / 2;
          }
        }
      }
    }
  }

  // Variant with horizontal gutters.
  &--with-horizontal-gutters {
    @include breakpoint($desktop ($desktop-large - 1px)) {
      margin-left: -$gutters-tablet / 2;
      margin-right: -$gutters-tablet / 2;

      .layout-2col-unequal,
      %layout-2col-unequal {
        // Two columns.
        &--col,
        &__col {
          padding-left: $gutters-tablet / 2;
          padding-right: $gutters-tablet / 2;
        }
      }
    }

    @include breakpoint($desktop-large) {
      margin-left: -$gutters-desktop / 2;
      margin-right: -$gutters-desktop / 2;

      .layout-2col-unequal,
      %layout-2col-unequal {
        &--col,
        &__col {
          padding-left: $gutters-desktop / 2;
          padding-right: $gutters-desktop / 2;
        }
      }
    }
  }

  // Variant with top and bottom gutters.
  &--with-vertical-gutters {
    padding-top: $gutters-mobile / 2;
    padding-bottom: $gutters-mobile / 2;

    .layout-2col-unequal,
    %layout-2col-unequal {
      &--col,
      &__col {
        padding-top: $gutters-mobile / 2;
        padding-bottom: $gutters-mobile / 2;
      }
    }

    // Two columns.
    @include breakpoint($tablet) {
      padding-top: $gutters-tablet / 2;
      padding-bottom: $gutters-tablet / 2;

      .layout-2col-unequal,
      %layout-2col-unequal {
        &--col,
        &__col {
          padding-top: $gutters-tablet / 2;
          padding-bottom: $gutters-tablet / 2;
        }
      }
    }

    @include breakpoint($desktop-large) {
      padding-top: $gutters-desktop / 2;
      padding-bottom: $gutters-desktop / 2;

      .layout-2col-unequal,
      %layout-2col-unequal {
        &--col,
        &__col {
          padding-top: $gutters-desktop / 2;
          padding-bottom: $gutters-desktop / 2;
        }
      }
    }
  }

  // Variant where the second column is the narrow one.
  &--second-is-narrow {
    @include breakpoint($desktop) {

      .layout-2col-unequal,
      %layout-2col-unequal {
        &--col,
        &__col {
          &:nth-child(2n) {
            width: (100 / 3) * 1%;
          }

          &:nth-child(2n + 1) {
            clear: left;
            width: (100 / 3) * 2%;
          }
        }
      }
    }
  }

  // Change order when the layout breaks to two columns.
  // Only works for two column / one row,
  // in this case every row should be wrapped in the layout-2col-unequal wrapper.
  &--inverse {
    @include breakpoint($desktop) {
      .layout-2col-unequal,
      %layout-2col-unequal {
        &--col,
        &__col {

          &:nth-child(2n) {
            order: 1;
          }

          &:nth-child(2n + 1) {
            order: 2;
          }
        }
      }
    }

    &.layout-2col-unequal--two-columns-on-tablet {
      @include breakpoint($tablet ($desktop - 1px)) {
        .layout-2col-unequal,
        %layout-2col-unequal {
          &--col,
          &__col {

            &:nth-child(2n) {
              order: 1;
            }

            &:nth-child(2n + 1) {
              order: 2;
            }
          }
        }
      }
    }
  }
}
